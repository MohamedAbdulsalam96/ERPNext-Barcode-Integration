[
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Stock Entry",
  "modified": "2022-01-20 18:01:55.928805",
  "name": "Stock Entry-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Stock Entry', {\n\trefresh(frm) {\n        frm.fields_dict.items.grid.toggle_enable(\"qty\",!frm.doc.stock_check);\n        frm.fields_dict.items.grid.toggle_display(\"checking_qty\",frm.doc.stock_check);\n        frm.fields_dict.items.grid.set_column_disp(\"checking_qty\",frm.doc.stock_check);\n        if(frm.doc.docstatus===1 && frm.doc.stock_entry_type == \"Manufacture\") {\n\t\t\tfrm.add_custom_button(__(\"Barcode Printing\"), function() {\n            frappe.call({\n                method:'barcode_shrdc.barcode_shrdc.doctype.barcode_printing.barcode_printing.create_barcode_printing',\n                args:{ throw_if_missing: true, \n                    se_id: frm.doc.name,\n                    pr_id: null}\n                \n            })\n\t\t\t\t.then(r => {\n\t\t\t\t\tif (r.message) {\n\t\t\t\t\t    console.log(r.message)\n\t\t\t\t\t\tlet new_bp_doc = r.message;\t// new barcode printing request\n\t\t\t\t\t\tfrappe.set_route(\"Form\", new_bp_doc.doctype, new_bp_doc.name);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t},  __(\"Create\"));\n\t\t\tfrm.page.set_inner_btn_group_as_primary(__('Create'));\n\n\t\t}\n\t},\n\tonload(frm) {\n        frm.fields_dict.items.grid.toggle_enable(\"qty\",!frm.doc.stock_check);\n        frm.fields_dict.items.grid.toggle_display(\"checking_qty\",frm.doc.stock_check);\n        frm.fields_dict.items.grid.set_column_disp(\"checking_qty\",frm.doc.stock_check);\n\t},\n\tscan_barcode: function(frm){\n\t    let scan_barcode_field = frm.fields_dict[\"scan_barcode\"];\n\n\t\tlet show_description = function(idx, exist = null) {\n\t\t\tif (exist) {\n\t\t\t\tscan_barcode_field.set_new_description(__('Row #{0}: Qty increased by 1', [idx]));\n\t\t\t} else {\n\t\t\t\tscan_barcode_field.set_new_description(__('Row #{0}: Item added', [idx]));\n\t\t\t}\n\t\t};\n\n\t\tif(frm.doc.scan_barcode) {\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"erpnext.selling.page.point_of_sale.point_of_sale.search_serial_or_batch_or_barcode_number\",\n\t\t\t\targs: { search_value: frm.doc.scan_barcode }\n\t\t\t}).then(r => {\n\t\t\t\tconst data = r && r.message;\n\t\t\t\tif (!data || Object.keys(data).length === 0) {\n\t\t\t\t\tscan_barcode_field.set_new_description(__('Cannot find Item with this barcode'));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet cur_grid = frm.fields_dict.items.grid;\n\n\t\t\t\tlet row_to_modify = null;\n\t\t\t\tconst existing_item_row = frm.doc.items.find(d => d.item_code === data.item_code);\n\t\t\t\tconst blank_item_row = frm.doc.items.find(d => !d.item_code);\n\n\t\t\t\tif (existing_item_row) {\n\t\t\t\t\trow_to_modify = existing_item_row;\n\t\t\t\t} else if (blank_item_row) {\n\t\t\t\t\trow_to_modify = blank_item_row;\n\t\t\t\t}\n\n\t\t\t\tif (!row_to_modify) {\n\t\t\t\t\t// add new row\n\t\t\t\t\trow_to_modify = frappe.model.add_child(frm.doc, cur_grid.doctype, 'items');\n\t\t\t\t\tfrappe.msgprint({\n                    title: __('Alert'),\n                    indicator: 'orange',\n                    message: __('New Item is added')\n                    });\n\t\t\t\t}\n\n\t\t\t\tshow_description(row_to_modify.idx, row_to_modify.item_code);\n\n\t\t\t\tfrm.from_barcode = true;\n\t\t\t\tfrappe.model.set_value(row_to_modify.doctype, row_to_modify.name, {\n\t\t\t\t\titem_code: data.item_code,\n\t\t\t\t\tchecking_qty: (frm.doc.stock_check)?(row_to_modify.checking_qty || 0) + 1 : row_to_modify.checking_qty,\n\t\t\t\t\tqty: (!frm.doc.stock_check)?(row_to_modify.qty || 0) + 1 : row_to_modify.qty\n\t\t\t\t});\n\n\t\t\t\t['serial_no', 'batch_no', 'barcode'].forEach(field => {\n\t\t\t\t\tif (data[field] && frappe.meta.has_field(row_to_modify.doctype, field)) {\n\n\t\t\t\t\t\tlet value = (row_to_modify[field] && field === \"serial_no\")\n\t\t\t\t\t\t\t? row_to_modify[field] + '\\n' + data[field] : data[field];\n\n\t\t\t\t\t\tfrappe.model.set_value(row_to_modify.doctype,\n\t\t\t\t\t\t\trow_to_modify.name, field, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tscan_barcode_field.set_value('');\n\t\t\t\trefresh_field(\"items\");\n\t\t\t});\n\t\t}\n\t},\n\tstock_check: function(frm)\n\t{\n        frm.fields_dict.items.grid.toggle_enable(\"qty\",!frm.doc.stock_check);\n        frm.fields_dict.items.grid.toggle_display(\"checking_qty\",frm.doc.stock_check);\n        frm.fields_dict.items.grid.set_column_disp(\"checking_qty\",frm.doc.stock_check);\n        if (frm.doc.stock_entry_type == \"Receive at Warehouse\")\n        {\n            if(frm.doc.stock_check)\n            {\n                frm.doc.items.forEach(function(d){\n                    d.serial_no = \"\"\n                })\n            }\n            else\n            {\n                frappe.call({\n        \t\t\tdoc: frm.doc,\n        \t\t\tmethod: \"set_items_for_stock_in\",\n        \t\t\tcallback: function() {\n        \t\t\t\trefresh_field('items');\n        \t\t\t}\n        \t\t}); \n            }\n\n        }\n\t},\n\tbefore_submit: function(frm,cdt,cdn){\n\t\tconst item = locals[cdt][cdn];\n\t\tif(frm.doc.stock_check)\n\t\t{\n\t\t    frm.doc.items.forEach(function(d)\n            {\n    \t\t    if(d.qty !== d.checking_qty) \n    \t\t    {\n    \t\t        frappe.validated = false;\n                    frappe.msgprint({\n                    title: __('Warning'),\n                    indicator: 'red',\n                    message: __('Checking Qty and Required Qty of Items row {0} does not matched.',[d.idx])\n                    });\n    \t\t    }\n    \t\t    if (frm.doc.stock_entry_type==\"Receive at Warehouse\")\n    \t\t    {\n    \t\t        frappe.call({\n                \t\t\targs: {name:frm.doc.outgoing_stock_entry},\n                \t\t\tmethod: \"get_stock_entry\",\n                \t\t\tcallback: function(r) {\n                \t\t\t\tconsole.log(r.message);\n                \t\t\t\tvar send_doc = r.message;\n            \t\t\t\t    var send_item = send_doc.items.find(send => send.item_code === d.item_code);\n                \t\t        var send_serials = send_item.serial_no.split(\"\\n\");\n                \t\t        console.log(send_serials);\n                \t\t        var serials = d.serial_no.split(\"\\n\");\n                \t\t        if (serials[serials.length-1]=='')\n                \t\t        {\n                \t\t            serials.pop();\n                \t\t        }\n                \t\t        const containsAll = serials.every(element => {\n                                  return send_serials.includes(element);\n                                });\n                                console.log(containsAll);\n            \n                \t\t        if (!containsAll)\n                \t\t        {\n                                    frappe.validated = false;\n                                    frappe.msgprint({\n                                    title: __('Warning'),\n                                    indicator: 'red',\n                                    message: __('Serial No. of Items row {0} does not match with Stock Entry (Outward GIT) {1}.',[d.idx, frm.doc.outgoing_stock_entry])\n                                });\n                \t\t        }\n                \t\t\t}\n                \t\t}); \n\n\n    \t\t      //  console.log(send_doc);\n    \t\t     \n    \t\t        \n    \t\t    }\n            });\n\t\t}\n\t},\n\tbefore_save(frm)\n\t{\n\t\tif(!frm.doc.stock_check)\n\t\t{\n    \t\tfrm.doc.items.forEach(function(d)\n                {\n                    frappe.model.set_value(d.doctype,d.name,'checking_qty',0);\n                }\n            );\n\t\t}\n\t},\n// \twork_order: function(frm) {\n// \t\tfrm.cscript.toggle_enable_bom();\n// \t\tif(!frm.doc.work_order || frm.doc.job_card) {\n// \t\t\treturn;\n// \t\t}\n//         var fg_completed_qty;\n// \t\treturn frappe.call({\n// \t\t\tmethod: \"get_work_order_details2\",\n// \t\t\targs: {\n// \t\t\t\twork_order: frm.doc.work_order,\n// \t\t\t\tcompany: frm.doc.company\n// \t\t\t},\n// \t\t\tcallback: function(r) {\n// \t\t\t    console.log(r);\n// \t\t\t\tif (!r.exc) {\n// \t\t\t\t\t$.each([\"from_bom\", \"bom_no\", \"fg_completed_qty\", \"use_multi_level_bom\"], function(i, field) {\n// \t\t\t\t\t\tfrm.set_value(field, r.message[field]);\n// \t\t\t\t\t});\n// \t\t\t        fg_completed_qty = r.message.fg_completed_qty;\n\n// \t\t\t\t\tif (frm.doc.purpose == \"Material Transfer for Manufacture\" && !frm.doc.to_warehouse)\n// \t\t\t\t\t\tfrm.set_value(\"to_warehouse\", r.message.wip_warehouse);\n\n\n// \t\t\t\t\tif (frm.doc.purpose == \"Manufacture\" || frm.doc.purpose == \"Material Consumption for Manufacture\" ) {\n// \t\t\t\t\t\tif (frm.doc.purpose == \"Manufacture\") {\n// \t\t\t\t\t\t\tif (!frm.doc.to_warehouse) frm.set_value(\"to_warehouse\", r.message.fg_warehouse);\n// \t\t\t\t\t\t}\n// \t\t\t\t\t\tif (!frm.doc.from_warehouse) frm.set_value(\"from_warehouse\", r.message.wip_warehouse);\n// \t\t\t\t\t}\n//                     frm.cscript.get_items();\n// \t\t\t\t}\n// \t\t\t}\n// \t\t});\n// \t}\n\n});\n\n// frappe.ui.form.on('Stock Entry Detail', {\n// \trefresh(frm,cdt,cdn) {\n// \t\t// your code here\n// \t\tconsole.log(frm);\n// \t\tconsole.log(cdt);\n// \t}\n// })"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Delivery Note",
  "modified": "2021-12-27 12:08:37.556578",
  "name": "Delivery Note-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Delivery Note', {\n\trefresh(frm) {\n        frm.fields_dict.items.grid.toggle_enable(\"qty\",!frm.doc.barcode_validation);\n        frm.fields_dict.items.grid.toggle_display(\"checking_qty\",frm.doc.barcode_validation);\n        frm.fields_dict.items.grid.set_column_disp(\"checking_qty\",frm.doc.barcode_validation);\n\t},\n\tonload(frm) {\n        frm.fields_dict.items.grid.toggle_enable(\"qty\",!frm.doc.barcode_validation);\n        frm.fields_dict.items.grid.toggle_display(\"checking_qty\",frm.doc.barcode_validation);\n        frm.fields_dict.items.grid.set_column_disp(\"checking_qty\",frm.doc.barcode_validation);\n\t},\n\tscan_barcode: function(frm){\n\t    let scan_barcode_field = frm.fields_dict[\"scan_barcode\"];\n\n\t\tlet show_description = function(idx, exist = null) {\n\t\t\tif (exist) {\n\t\t\t\tscan_barcode_field.set_new_description(__('Row #{0}: Qty increased by 1', [idx]));\n\t\t\t} else {\n\t\t\t\tscan_barcode_field.set_new_description(__('Row #{0}: Item added', [idx]));\n\t\t\t}\n\t\t};\n\n\t\tif(frm.doc.scan_barcode) {\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"erpnext.selling.page.point_of_sale.point_of_sale.search_serial_or_batch_or_barcode_number\",\n\t\t\t\targs: { search_value: frm.doc.scan_barcode }\n\t\t\t}).then(r => {\n\t\t\t\tconst data = r && r.message;\n\t\t\t\tif (!data || Object.keys(data).length === 0) {\n\t\t\t\t\tscan_barcode_field.set_new_description(__('Cannot find Item with this barcode'));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet cur_grid = frm.fields_dict.items.grid;\n\n\t\t\t\tlet row_to_modify = null;\n\t\t\t\tconst existing_item_row = frm.doc.items.find(d => d.item_code === data.item_code);\n\t\t\t\tconst blank_item_row = frm.doc.items.find(d => !d.item_code);\n\n\t\t\t\tif (existing_item_row) {\n\t\t\t\t\trow_to_modify = existing_item_row;\n\t\t\t\t} else if (blank_item_row) {\n\t\t\t\t\trow_to_modify = blank_item_row;\n\t\t\t\t}\n                //Message to inform user for additional items added\n                if(!row_to_modify || !row_to_modify.item_code)\n                {\n                    frappe.msgprint({\n                        title: __('Message'),\n                        indicator: 'orange',\n                        message: __('New Item ({0}) is added.',[data.item_code])\n                    });\n                }\n\t\t\t\tif (!row_to_modify) {\n\t\t\t\t\t// add new row\n\t\t\t\t\trow_to_modify = frappe.model.add_child(frm.doc, cur_grid.doctype, 'items');\n\t\t\t\t}\n\n\t\t\t\tshow_description(row_to_modify.idx, row_to_modify.item_code);\n\n\t\t\t\tfrm.from_barcode = true;\n\t\t\t\tfrappe.model.set_value(row_to_modify.doctype, row_to_modify.name, {\n\t\t\t\t\titem_code: data.item_code,\n\t\t\t\t\tchecking_qty: (frm.doc.barcode_validation)?(row_to_modify.checking_qty || 0) + 1 : row_to_modify.checking_qty,\n\t\t\t\t\tqty: (!frm.doc.barcode_validation)?(row_to_modify.qty || 0) + 1 : row_to_modify.qty\n\t\t\t\t});\n\n\t\t\t\t['serial_no', 'batch_no', 'barcode'].forEach(field => {\n\t\t\t\t\tif (data[field] && frappe.meta.has_field(row_to_modify.doctype, field)) {\n\n\t\t\t\t\t\tlet value = (row_to_modify[field] && field === \"serial_no\")\n\t\t\t\t\t\t\t? row_to_modify[field] + '\\n' + data[field] : data[field];\n\n\t\t\t\t\t\tfrappe.model.set_value(row_to_modify.doctype,\n\t\t\t\t\t\t\trow_to_modify.name, field, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tscan_barcode_field.set_value('');\n\t\t\t\trefresh_field(\"items\");\n\t\t\t});\n\t\t}\n\t},\n\tbarcode_validation: function(frm)\n\t{\n        frm.fields_dict.items.grid.toggle_enable(\"qty\",!frm.doc.barcode_validation);\n        frm.fields_dict.items.grid.toggle_display(\"checking_qty\",frm.doc.barcode_validation);\n        frm.fields_dict.items.grid.set_column_disp(\"checking_qty\",frm.doc.barcode_validation);\n\t},\n\tbefore_submit: function(frm,cdt,cdn){\n\t    console.log(frm.doc.barcode_validation);\n\n\t\tconst item = locals[cdt][cdn];\n\t\tif(frm.doc.barcode_validation)\n\t\t{\n\t\t    frm.doc.items.forEach(function(d)\n            {\n    \t\t    if(d.qty !== d.checking_qty) \n    \t\t    {\n    \t\t        frappe.validated = false;\n                    frappe.msgprint({\n                    title: __('Warning'),\n                    indicator: 'red',\n                    message: __('Checking Qty and Required Qty of Items row {0} does not matched.',[d.idx])\n                    });\n    \t\t    }\n            });\n\t\t}\n\t},\n\tbefore_save(frm)\n\t{\n\t\tif(!frm.doc.barcode_validation)\n\t\t{\n    \t\tfrm.doc.items.forEach(function(d)\n                {\n                    frappe.model.set_value(d.doctype,d.name,'checking_qty',0);\n                }\n            );\n\t\t}\n\t}\n\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Work Order",
  "modified": "2021-12-24 14:07:27.009706",
  "name": "Work Order-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "var pp_date; //planned start date set in production plane doc\r\nvar pp_time; //planned start datetime set in production plane doc\r\nvar pp_datetime;\r\nconst format1 = \"YYYY-MM-DD HH:mm:ss\";\r\nconst format_t = \"HH:mm:ss\";\r\nconst format_d = \"YYYY-MM-DD\";\r\nvar pp_isUndefined = 0; //condition check production plan is undefined or not\r\nvar asd_isUndefined = 0; //condition check actual start date is undefined or not\r\n/*\r\n    console.log(frappe.datetime.now_datetime()); //give datetime\r\n    console.log(frappe.datetime.get_today()); //give date only\r\n*/\r\n\r\n//example: pp_datetime = moment_dt(r.po_items[0].planned_start_date);\r\nfunction moment_dt(datetime){\r\n    var format1 = \"YYYY-MM-DD HH:mm:ss\";\r\n    return moment(datetime).format(format1);  \r\n}\r\n\r\n\r\n\r\nfrappe.ui.form.on('Work Order', {\r\n    \r\n\tbefore_load:function(frm) {\r\n        /*TO get data from a specific doctype and manually match the planned start date in production plan doc to work order doc*/\r\n        \r\n        // if (frm.doc.production_plan !== '') //to check condition wherether it is link from a production plan\r\n        \r\n\r\n\r\n\r\n        if (frm.doc.production_plan === undefined)\r\n        {\r\n            pp_isUndefined = 1;\r\n        }\r\n        if (frm.doc.actual_start_date === undefined) //maybe check work order status better\r\n        {\r\n            asd_isUndefined = 1; //1 = no start work order yet, 0 = start work order\r\n        }\r\n        \r\n        /*\r\n        if we link from production plan, then run this part of code to match the production planned date to this particular work order\r\n        */\r\n        if (!pp_isUndefined && asd_isUndefined) \r\n        {\r\n            frappe.db.get_doc('Production Plan', frm.doc.production_plan)\r\n                .then(r => {\r\n                \r\n                /* Method 1 to obtain date and time*/    \r\n                // var temp_date = r.po_items[0].planned_start_date.split(\" \");//split the datetime (only take the first row production plan item)\r\n                // pp_date = temp_date[0]; \r\n                // pp_time = temp_date[1].split(\".\")[0]; //need redo split because if we assign temp_date (global) to the datetime it give us something like this \"16:58:16.583854\"\r\n                \r\n                /*Method 2 to obtain datetime*/\r\n                // Using momentjs and date class to modify date\r\n                //var temp_date = new Date(r.po_items[0].planned_start_date); //convert to Date class\r\n                //temp_date = moment(temp_date).format(format1); \r\n\r\n                var index = 0; //index we want\r\n                /*\r\n                // These part of code is to loop through the po_items field in production plan and check which \r\n                // sales order match the current work order's sales order, get its index in order to \r\n                // access the correct row and find its own production plan date\r\n                */\r\n                r.po_items.forEach(function(d) {\r\n    \t\t\t    if (frm.doc.sales_order === d.sales_order)\r\n    \t\t\t    {\r\n    \t\t\t        index = d.idx-1;\r\n    \t\t\t    }\r\n\t\t        });\r\n                pp_datetime = moment(r.po_items[index].planned_start_date).format(format1);//convert to moment type;\r\n                \r\n                console.log(r.po_items[index].sales_order);\r\n                console.log(pp_datetime);\r\n                \r\n                /*Method 1 to extract date and time using moment*/\r\n                pp_date = moment(pp_datetime).format(format_d);\r\n                pp_time = moment(pp_datetime).format(format_t);\r\n                \r\n                /*Method 2 to extract date and time using string split method*/\r\n                //pp_date = pp_datetime.split(\" \")[0];\r\n                //pp_time = pp_datetime.split(\" \")[1];\r\n    \r\n                /*Check the original planned start date is overdue or not*/\r\n                if (pp_datetime< frappe.datetime.now_datetime()){\r\n                    //if overdue, set the planned start date as current date at 9am\r\n                    pp_datetime = frappe.datetime.now_datetime(); //get today datetime\r\n                    if (moment(pp_datetime).get('h')<10) //if the work order is create before 10, then we set default time at 10pm\r\n                        pp_datetime = moment(pp_datetime).set({\"h\":10,'m':0,'s':0}).format(format1); \r\n\r\n                    pp_datetime= moment(pp_datetime).add({'m':10}).format(format1);//add 10 minute delay to the current time\r\n                    pp_datetime = moment(pp_datetime).set(\"s\",0).format(format1); //fix the second at 0 second.\r\n                    frappe.msgprint({\r\n                    title: __('Overdue Planned Start Day'),\r\n                    indicator: 'orange',\r\n                    message: __('Original planned start day is overdued. Default planned start date has been inserted.')\r\n                });\r\n                }\r\n                //pp_datetime = pp_date.concat(\" \" +pp_time); //Define the new datetime by concatenate pp_date and pp_time\r\n                frm.set_value('planned_start_date',pp_datetime);//Assign the datetime(modified) to the planned start date field\r\n            });\r\n        }\r\n        else if(pp_isUndefined){ //if we does not link to a production plan\r\n            pp_datetime = frappe.datetime.now_datetime();\r\n            pp_date = moment(pp_datetime).format(format_d);\r\n            pp_time = moment(pp_datetime).format(format_t);\r\n            frm.set_df_property('planned_start_date','read_only',0); //to remove the read_only if we didnt link from the production plan\r\n        }\r\n\t},\r\n\t\r\n\t/*To get a list of total quantity that need to be manufactured to plan our workorder */\r\n\trefresh: function(frm){\r\n\t   \r\n\t\t\r\n\t    if (!frm.doc.status)\r\n\t\t\tfrm.doc.status = 'Draft';\r\n\r\n\t\tfrm.add_fetch(\"sales_order\", \"project\", \"project\");\r\n\r\n\t\tif(frm.doc.__islocal) {\r\n\t\t\tfrm.set_value({\r\n\t\t\t\t\"actual_start_date\": \"\",\r\n\t\t\t\t\"actual_end_date\": \"\"\r\n\t\t\t});\r\n\t\t\terpnext.work_order.set_default_warehouse(frm);\r\n\t\t}\r\n\t    \r\n\t    if (asd_isUndefined){ //Only run this command if we havent start our work order, this is to avoid rewrite of planned start date\r\n    \t    var total_qty; \r\n        \tfrappe.db.get_list('Work Order', {\r\n                fields: ['qty'],\r\n                filters:\r\n                    [[\r\n                    'planned_start_date', 'between', [pp_date, pp_date] //Limit the filter only on that particular day where we want to the work order\r\n                    ]]\r\n            }).then(records => {\r\n                console.log(records);\r\n                \r\n                //Calculte the sum of the qty that have to be manufactured on the planned start day\r\n                total_qty = records.reduce(function (accumulator, item) {\r\n                 return accumulator + item.qty;\r\n                }, 0); //calculate the sum\r\n                console.log(total_qty);\r\n                \r\n                //condition check for total_qty and current doctype quantity (on the planned start day)\r\n                var constraint = 50;\r\n                var delay_m = 0; //delay in minute\r\n                var delay_d = 0; //delay in day\r\n                while (total_qty >= constraint ){ //asume one day only can manufacture 50 name tag\r\n                    delay_d = delay_d+ 1;\r\n                    constraint = constraint + 50;\r\n                }\r\n    \r\n                /*change planned start datetime*/\r\n                //Manually set the default datetime to 9.00 am\r\n                //let date = frappe.datetime.add_days(frappe.datetime.now_datetime(), delay_d);\r\n                //let def_time = '9:00:00';\r\n                //date = date.concat(\" \"+def_time); \r\n                //console.log(date);\r\n                \r\n                /*\r\n                // moment().set('year',number); 'month''day''hour''minute'\r\n                // moment().get('year'); moment().get('Y'); \r\n                */\r\n                \r\n                /*Adding Method 1*/\r\n                //pp_datetime= moment(pp_datetime).add(30, 'm').add(1,'d').format(format1);\r\n                \r\n                /* Adding Method 2*/\r\n                pp_datetime= moment(pp_datetime).add({'m':delay_m,'days':delay_d}).format(format1); //change planned date \r\n                console.log(pp_datetime);\r\n    \r\n                \r\n                frm.set_value('planned_start_date',pp_datetime);//set new planned time date after running the condition\r\n                \r\n                if (delay_d){ //if we have the delay only print the msg\r\n                    frappe.msgprint({\r\n                    title: __('Note'),\r\n                    indicator: 'green',\r\n                    message: __('Planned start day have been modified. The delivery date will be delayed.')\r\n                }); \r\n                }\r\n                \r\n                /*\r\n                // if delivery date is smaller than planned start day mean it is invalid,\r\n                // set the date to be one day after planned start day\r\n                */\r\n                if (frm.doc.expected_delivery_date <= pp_datetime){ \r\n                    frm.set_value('expected_delivery_date',frappe.datetime.add_days(pp_datetime, 1)); //add one more day to planned start day\r\n                }\r\n                else{\r\n                //change expected delivery date (delay day + original delivery date)\r\n                    frm.set_value('expected_delivery_date',frappe.datetime.add_days(frm.doc.expected_delivery_date, delay_d)); //add delay to original delivery date\r\n                }\r\n            });\r\n\t    }\r\n\t},\r\n// \tchange_planned_start_date:function(frm){\r\n// \t    frm.set_df_property('planned_start_date','read_only',!frm.doc.change_planned_start_date);\r\n// \t    //frm.set_df_property('expected_delivery_date','read only',1);\r\n\r\n// \t},\r\n\t\r\n\tplanned_start_date:function(frm){\r\n\t    var ss_datetime = frm.doc.planned_start_date;\r\n\t    \r\n\t    console.log(ss_datetime);\r\n    \tif (ss_datetime < pp_datetime || ss_datetime>frm.doc.expected_delivery_date)  \r\n\t    {\r\n\t       //frappe.throw(\"Date is unavailable. Please retry.\");\r\n\t       if(frm.doc.change_planned_start_date){ //check whether the tick was pressed, if pressed mean we changing ourselve and need warn the change\r\n    \t       frappe.msgprint({\r\n                    title: __('Warning'),\r\n                    indicator: 'red',\r\n                    message: __('Planned start date selected is unavailable. Please choose another date.')\r\n                });\r\n    \t       frm.set_value('planned_start_date',pp_datetime); \r\n\t       }\r\n\t    }\r\n\t},\r\n});\r\n\r\n\r\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Production Plan",
  "modified": "2021-12-24 14:16:25.749277",
  "name": "Production Plan-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "var pp_date; //planned start date set in production plane doc\r\nvar pp_time; //planned start time set in production plane doc\r\nvar pp_datetime;\r\nvar pp_tempdt;//temprary planned start datetime for modification\r\nvar last_datetime;//The lastest datetime of the product being manufacture\r\n\r\nvar ms_time; //machine start operation time\r\nvar me_time; //machine end operation time\r\nvar product_allow = 50; //product allow to be manufactured each day\r\nconst format1 = \"YYYY-MM-DD HH:mm:ss\";\r\nconst format_t = \"HH:mm:ss\";\r\nconst format_d = \"YYYY-MM-DD\";\r\nvar isUndefined = 0;\r\n\r\n/*\r\n    console.log(frappe.datetime.now_datetime()); //give datetime\r\n    console.log(frappe.datetime.get_today()); //give date only\r\n*/\r\n\r\n//Way 2 to use async and acess Promise result [the one that i more prefer way]\r\n// async function get_to_manufacture_order(pp_date){\r\n//     //result = the PromiseResult\r\n//     let result =await frappe.db.get_list('Work Order', {\r\n//         fields: ['qty'],\r\n//         filters:\r\n//             [[\r\n//             'planned_start_date', 'between', [pp_date, pp_date] //Limit the filter only on that particular day where we want to the work order\r\n//             ]]\r\n//     });\r\n//     // do whatever you need with the data below\r\n//     let qty = result.reduce(function (accumulator, item) {\r\n//         return accumulator + item.qty;\r\n//     }, 0); //calculate the sum\r\n    \r\n//     console.log(qty);\r\n//     return qty; \r\n// }\r\n    \r\nfunction modify_datetime(pp_datetime){\r\n    //Set default datetime for the planned start date first\r\n    pp_datetime = frappe.datetime.now_datetime();\r\n    if (moment(pp_datetime).get('h')<10) //if the work order is create before 10, then we set default time at 10am\r\n        pp_datetime = moment(pp_datetime).set({\"h\":10,'m':0,'s':0}).format(format1); \r\n    else if (moment(pp_datetime).get('h')>17) //if the work order is create after 17, then we set default time tomorrow at 10am\r\n        pp_datetime = moment(pp_datetime).add({'days':1}).format(format1); \r\n        pp_datetime = moment(pp_datetime).set({\"h\":10,'m':0,'s':0}).format(format1); \r\n    \r\n    return pp_datetime;\r\n}\r\n\r\nfrappe.ui.form.on('Production Plan',{\r\n    before_save:function(frm){\r\n\tvar wo_qty = 1;\r\n    var pp_qty = 0; //production plan total qty to be manufactured\r\n    var total_qty = 0; //real wo_qty + pp_qty\r\n\r\n    pp_datetime = modify_datetime(pp_datetime);\r\n    pp_date = moment(pp_datetime).format(format_d);\r\n    pp_time = moment(pp_datetime).format(format_t);\r\n    console.log(pp_datetime);\r\n    //pp_date = '2021-12-23';\r\n\r\n    //Get all information needed\r\n    frappe.call({\r\n\t\tmethod:\"get_all_info\",\r\n\t\targs: {\r\n\t\t    pp_date:pp_date,\r\n\r\n\t\t},\r\n\t\tcallback: function(r) {\r\n\t\t    ////////// Production PLan Setup //////////\r\n\t\t  //  var pp_setup = r.message.pp_setup;\r\n\t\t  //  console.log(pp_setup);\r\n\t\t  //  product_allow = pp_setup.allow_no;\r\n    //         ms_time = pp_setup.start_time.split(\":\")[0]; //if use moment(r.start_time).get('h') it tell me invalid date\r\n    //         me_time = pp_setup.end_time.split(\":\")[0];\r\n    \r\n\t\t    ////////// Production PLan Setup End //////////\r\n\t\t    wo_qty = r.message.wo_qty;\r\n\t\t    total_qty = wo_qty; //Set total qty = work order total initially\r\n\t\t    last_datetime= r.message.last_datetime;\r\n\t\t    console.log(r.message.wo_list);\r\n\t\t    \r\n\t\t    /* Calculate current production plan total planned qty need to be manufactured*/\r\n\t\t    frm.doc.po_items.forEach(function(d) {\r\n                pp_qty = pp_qty + d.planned_qty;\r\n            });\r\n\r\n\t\t    console.log(wo_qty);\r\n\t\t    console.log(pp_qty);\r\n\t\t    ///////////////////// is < product_allow i testing else loop so change to > product allow///////////////////\r\n            /*Condition check*/\r\n            if ((wo_qty+pp_qty) < product_allow) // If current pp total planned qty smaller than the total_qty\r\n            {\r\n                for(let row of frm.doc.po_items) {\r\n                    frappe.model.set_value(row.doctype,row.name,'planned_start_date',pp_datetime);\r\n                }\r\n                total_qty = total_qty+pp_qty; //equivalent to :total_qty=wo_qty + pp_qty                    \r\n                frappe.msgprint({\r\n                    title: __('Note'),\r\n                    indicator: 'green',\r\n                    message: __('All sales order can be done on the same date.')\r\n                });//msgprint loop\r\n            }\r\n            else\r\n            {\r\n                for(let row of frm.doc.po_items)\r\n        \t\t{\r\n        \t\t    //console.log(row.planned_qty);\r\n        \t\t    console.log(row.planned_qty);\r\n        \t\t    total_qty = total_qty + row.planned_qty;\r\n        \t\t    if(total_qty <product_allow) // If (planned_qty + ady have wo_qty) < # of product allowed to be manufactured\r\n        \t\t    {\r\n        \t\t        frappe.model.set_value(row.doctype,row.name,'planned_start_date',pp_datetime);\r\n        \t\t        console.log(total_qty);\r\n        \t\t    }\r\n        \t\t    else\r\n        \t\t    {\r\n        \t\t        total_qty = total_qty - row.planned_qty;\r\n        \t\t        pp_tempdt = moment(pp_datetime).add({'days':1}).format(format1); \r\n                        pp_tempdt = moment(pp_datetime).set({\"h\":10,'m':0,'s':0}).format(format1);\r\n                        frappe.model.set_value(row.doctype,row.name,'planned_start_date',pp_tempdt);\r\n        \t\t        console.log(pp_tempdt);\r\n        \t\t        pp_tempdt = moment(pp_datetime).subtract({'days':1}).format(format1); \r\n        \t\t    }\r\n        \t\t}\r\n            }\r\n            \r\n\r\n\t\t}//callback loop\r\n\t});//call loop\r\n\t\r\n    }//beforeload:function(frm) loop\r\n});//frappe.ui.form loop\r\n\r\n\r\n    \r\n\t"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Purchase Receipt",
  "modified": "2021-12-31 18:02:23.429528",
  "name": "Purchase Receipt-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Purchase Receipt', {\n\trefresh(frm) {\n\t\tif(frm.doc.docstatus===1) {\n\t\t\tfrm.add_custom_button(__(\"Barcode Printing\"), function() {\n            frappe.call({\n                method:'barcode_shrdc.barcode_shrdc.doctype.barcode_printing.barcode_printing.create_barcode_printing',\n                args:{ throw_if_missing: true, \n                    se_id: null,\n                    pr_id: frm.doc.name}\n                \n            })\n\t\t\t\t.then(r => {\n\t\t\t\t\tif (r.message) {\n\t\t\t\t\t    console.log(r.message)\n\t\t\t\t\t\tlet new_bp_doc = r.message;\t// new barcode printing request\n\t\t\t\t\t\tfrappe.set_route(\"Form\", new_bp_doc.doctype, new_bp_doc.name);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t},  __(\"Create\"));\n\t\t\tfrm.page.set_inner_btn_group_as_primary(__('Create'));\n\n\t\t}\n\t}\n})"
 }
]